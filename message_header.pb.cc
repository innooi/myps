// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageHeader_ObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageHeader_MsgLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageHeader_PkgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageHeader_SysMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fheader_2eproto() {
  protobuf_AddDesc_message_5fheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_header.proto");
  GOOGLE_CHECK(file != NULL);
  MessageHeader_descriptor_ = file->message_type(0);
  static const int MessageHeader_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, from_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, from_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, from_obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, to_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, to_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, to_obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, msg_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, pkg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, sys_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, tracker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, rpl_tracker_id_),
  };
  MessageHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageHeader_descriptor_,
      MessageHeader::default_instance_,
      MessageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageHeader));
  MessageHeader_ObjType_descriptor_ = MessageHeader_descriptor_->enum_type(0);
  MessageHeader_MsgLevel_descriptor_ = MessageHeader_descriptor_->enum_type(1);
  MessageHeader_PkgType_descriptor_ = MessageHeader_descriptor_->enum_type(2);
  MessageHeader_SysMsgType_descriptor_ = MessageHeader_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageHeader_descriptor_, &MessageHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fheader_2eproto() {
  delete MessageHeader::default_instance_;
  delete MessageHeader_reflection_;
}

void protobuf_AddDesc_message_5fheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024message_header.proto\"\363\004\n\rMessageHeader"
    "\022\017\n\007from_id\030\001 \001(\t\022\017\n\007from_ip\030\002 \001(\t\022\021\n\tfr"
    "om_port\030\003 \001(\005\022-\n\rfrom_obj_type\030\004 \001(\0162\026.M"
    "essageHeader.ObjType\022\r\n\005to_id\030\005 \001(\t\022\r\n\005t"
    "o_ip\030\006 \001(\t\022\017\n\007to_port\030\007 \001(\005\022+\n\013to_obj_ty"
    "pe\030\010 \001(\0162\026.MessageHeader.ObjType\022*\n\tmsg_"
    "level\030\t \001(\0162\027.MessageHeader.MsgLevel\022(\n\010"
    "pkg_type\030\n \001(\0162\026.MessageHeader.PkgType\022/"
    "\n\014sys_msg_type\030\013 \001(\0162\031.MessageHeader.Sys"
    "MsgType\022\020\n\010priority\030\014 \001(\005\022\022\n\ntracker_id\030"
    "\r \001(\003\022\026\n\016rpl_tracker_id\030\016 \001(\003\"5\n\007ObjType"
    "\022\010\n\004NODE\020\000\022\t\n\005FILED\020\001\022\t\n\005CACHE\020\002\022\n\n\006ENGI"
    "NE\020\003\"$\n\010MsgLevel\022\013\n\007SYS_MSG\020\000\022\013\n\007USR_MSG"
    "\020\001\"%\n\007PkgType\022\007\n\003REQ\020\000\022\007\n\003RPL\020\001\022\010\n\004PUSH\020"
    "\002\"Y\n\nSysMsgType\022\021\n\rREGISTER_NODE\020\000\022\022\n\016NO"
    "DE_LIST_DATA\020\001\022\021\n\rNODE_LIST_ACK\020\002\022\021\n\rSTA"
    "RTUP_READY\020\003", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_header.proto", &protobuf_RegisterTypes);
  MessageHeader::default_instance_ = new MessageHeader();
  MessageHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fheader_2eproto {
  StaticDescriptorInitializer_message_5fheader_2eproto() {
    protobuf_AddDesc_message_5fheader_2eproto();
  }
} static_descriptor_initializer_message_5fheader_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageHeader_ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_ObjType_descriptor_;
}
bool MessageHeader_ObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageHeader_ObjType MessageHeader::NODE;
const MessageHeader_ObjType MessageHeader::FILED;
const MessageHeader_ObjType MessageHeader::CACHE;
const MessageHeader_ObjType MessageHeader::ENGINE;
const MessageHeader_ObjType MessageHeader::ObjType_MIN;
const MessageHeader_ObjType MessageHeader::ObjType_MAX;
const int MessageHeader::ObjType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MessageHeader_MsgLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_MsgLevel_descriptor_;
}
bool MessageHeader_MsgLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageHeader_MsgLevel MessageHeader::SYS_MSG;
const MessageHeader_MsgLevel MessageHeader::USR_MSG;
const MessageHeader_MsgLevel MessageHeader::MsgLevel_MIN;
const MessageHeader_MsgLevel MessageHeader::MsgLevel_MAX;
const int MessageHeader::MsgLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MessageHeader_PkgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_PkgType_descriptor_;
}
bool MessageHeader_PkgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageHeader_PkgType MessageHeader::REQ;
const MessageHeader_PkgType MessageHeader::RPL;
const MessageHeader_PkgType MessageHeader::PUSH;
const MessageHeader_PkgType MessageHeader::PkgType_MIN;
const MessageHeader_PkgType MessageHeader::PkgType_MAX;
const int MessageHeader::PkgType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MessageHeader_SysMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_SysMsgType_descriptor_;
}
bool MessageHeader_SysMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageHeader_SysMsgType MessageHeader::REGISTER_NODE;
const MessageHeader_SysMsgType MessageHeader::NODE_LIST_DATA;
const MessageHeader_SysMsgType MessageHeader::NODE_LIST_ACK;
const MessageHeader_SysMsgType MessageHeader::STARTUP_READY;
const MessageHeader_SysMsgType MessageHeader::SysMsgType_MIN;
const MessageHeader_SysMsgType MessageHeader::SysMsgType_MAX;
const int MessageHeader::SysMsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageHeader::kFromIdFieldNumber;
const int MessageHeader::kFromIpFieldNumber;
const int MessageHeader::kFromPortFieldNumber;
const int MessageHeader::kFromObjTypeFieldNumber;
const int MessageHeader::kToIdFieldNumber;
const int MessageHeader::kToIpFieldNumber;
const int MessageHeader::kToPortFieldNumber;
const int MessageHeader::kToObjTypeFieldNumber;
const int MessageHeader::kMsgLevelFieldNumber;
const int MessageHeader::kPkgTypeFieldNumber;
const int MessageHeader::kSysMsgTypeFieldNumber;
const int MessageHeader::kPriorityFieldNumber;
const int MessageHeader::kTrackerIdFieldNumber;
const int MessageHeader::kRplTrackerIdFieldNumber;
#endif  // !_MSC_VER

MessageHeader::MessageHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageHeader)
}

void MessageHeader::InitAsDefaultInstance() {
}

MessageHeader::MessageHeader(const MessageHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_port_ = 0;
  from_obj_type_ = 0;
  to_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_port_ = 0;
  to_obj_type_ = 0;
  msg_level_ = 0;
  pkg_type_ = 0;
  sys_msg_type_ = 0;
  priority_ = 0;
  tracker_id_ = GOOGLE_LONGLONG(0);
  rpl_tracker_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
  if (from_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_id_;
  }
  if (from_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_ip_;
  }
  if (to_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_id_;
  }
  if (to_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_ip_;
  }
  if (this != default_instance_) {
  }
}

void MessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHeader_descriptor_;
}

const MessageHeader& MessageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fheader_2eproto();
  return *default_instance_;
}

MessageHeader* MessageHeader::default_instance_ = NULL;

MessageHeader* MessageHeader::New() const {
  return new MessageHeader;
}

void MessageHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(from_port_, from_obj_type_);
    ZR_(to_port_, to_obj_type_);
    if (has_from_id()) {
      if (from_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_id_->clear();
      }
    }
    if (has_from_ip()) {
      if (from_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_ip_->clear();
      }
    }
    if (has_to_id()) {
      if (to_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_id_->clear();
      }
    }
    if (has_to_ip()) {
      if (to_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(msg_level_, rpl_tracker_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_id().data(), this->from_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_ip;
        break;
      }

      // optional string from_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_from_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_ip().data(), this->from_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_port;
        break;
      }

      // optional int32 from_port = 3;
      case 3: {
        if (tag == 24) {
         parse_from_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_port_)));
          set_has_from_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_from_obj_type;
        break;
      }

      // optional .MessageHeader.ObjType from_obj_type = 4;
      case 4: {
        if (tag == 32) {
         parse_from_obj_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageHeader_ObjType_IsValid(value)) {
            set_from_obj_type(static_cast< ::MessageHeader_ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_to_id;
        break;
      }

      // optional string to_id = 5;
      case 5: {
        if (tag == 42) {
         parse_to_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_id().data(), this->to_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_to_ip;
        break;
      }

      // optional string to_ip = 6;
      case 6: {
        if (tag == 50) {
         parse_to_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_ip().data(), this->to_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_port;
        break;
      }

      // optional int32 to_port = 7;
      case 7: {
        if (tag == 56) {
         parse_to_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_port_)));
          set_has_to_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_to_obj_type;
        break;
      }

      // optional .MessageHeader.ObjType to_obj_type = 8;
      case 8: {
        if (tag == 64) {
         parse_to_obj_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageHeader_ObjType_IsValid(value)) {
            set_to_obj_type(static_cast< ::MessageHeader_ObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_msg_level;
        break;
      }

      // optional .MessageHeader.MsgLevel msg_level = 9;
      case 9: {
        if (tag == 72) {
         parse_msg_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageHeader_MsgLevel_IsValid(value)) {
            set_msg_level(static_cast< ::MessageHeader_MsgLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pkg_type;
        break;
      }

      // optional .MessageHeader.PkgType pkg_type = 10;
      case 10: {
        if (tag == 80) {
         parse_pkg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageHeader_PkgType_IsValid(value)) {
            set_pkg_type(static_cast< ::MessageHeader_PkgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sys_msg_type;
        break;
      }

      // optional .MessageHeader.SysMsgType sys_msg_type = 11;
      case 11: {
        if (tag == 88) {
         parse_sys_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageHeader_SysMsgType_IsValid(value)) {
            set_sys_msg_type(static_cast< ::MessageHeader_SysMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_priority;
        break;
      }

      // optional int32 priority = 12;
      case 12: {
        if (tag == 96) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_tracker_id;
        break;
      }

      // optional int64 tracker_id = 13;
      case 13: {
        if (tag == 104) {
         parse_tracker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracker_id_)));
          set_has_tracker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rpl_tracker_id;
        break;
      }

      // optional int64 rpl_tracker_id = 14;
      case 14: {
        if (tag == 112) {
         parse_rpl_tracker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rpl_tracker_id_)));
          set_has_rpl_tracker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageHeader)
  return false;
#undef DO_
}

void MessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageHeader)
  // optional string from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_id().data(), this->from_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_id(), output);
  }

  // optional string from_ip = 2;
  if (has_from_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_ip().data(), this->from_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_ip(), output);
  }

  // optional int32 from_port = 3;
  if (has_from_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from_port(), output);
  }

  // optional .MessageHeader.ObjType from_obj_type = 4;
  if (has_from_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->from_obj_type(), output);
  }

  // optional string to_id = 5;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_id().data(), this->to_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->to_id(), output);
  }

  // optional string to_ip = 6;
  if (has_to_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_ip().data(), this->to_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->to_ip(), output);
  }

  // optional int32 to_port = 7;
  if (has_to_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->to_port(), output);
  }

  // optional .MessageHeader.ObjType to_obj_type = 8;
  if (has_to_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->to_obj_type(), output);
  }

  // optional .MessageHeader.MsgLevel msg_level = 9;
  if (has_msg_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->msg_level(), output);
  }

  // optional .MessageHeader.PkgType pkg_type = 10;
  if (has_pkg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->pkg_type(), output);
  }

  // optional .MessageHeader.SysMsgType sys_msg_type = 11;
  if (has_sys_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->sys_msg_type(), output);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->priority(), output);
  }

  // optional int64 tracker_id = 13;
  if (has_tracker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tracker_id(), output);
  }

  // optional int64 rpl_tracker_id = 14;
  if (has_rpl_tracker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->rpl_tracker_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageHeader)
}

::google::protobuf::uint8* MessageHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageHeader)
  // optional string from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_id().data(), this->from_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_id(), target);
  }

  // optional string from_ip = 2;
  if (has_from_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_ip().data(), this->from_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_ip(), target);
  }

  // optional int32 from_port = 3;
  if (has_from_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from_port(), target);
  }

  // optional .MessageHeader.ObjType from_obj_type = 4;
  if (has_from_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->from_obj_type(), target);
  }

  // optional string to_id = 5;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_id().data(), this->to_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_id(), target);
  }

  // optional string to_ip = 6;
  if (has_to_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_ip().data(), this->to_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->to_ip(), target);
  }

  // optional int32 to_port = 7;
  if (has_to_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->to_port(), target);
  }

  // optional .MessageHeader.ObjType to_obj_type = 8;
  if (has_to_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->to_obj_type(), target);
  }

  // optional .MessageHeader.MsgLevel msg_level = 9;
  if (has_msg_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->msg_level(), target);
  }

  // optional .MessageHeader.PkgType pkg_type = 10;
  if (has_pkg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->pkg_type(), target);
  }

  // optional .MessageHeader.SysMsgType sys_msg_type = 11;
  if (has_sys_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->sys_msg_type(), target);
  }

  // optional int32 priority = 12;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->priority(), target);
  }

  // optional int64 tracker_id = 13;
  if (has_tracker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tracker_id(), target);
  }

  // optional int64 rpl_tracker_id = 14;
  if (has_rpl_tracker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->rpl_tracker_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageHeader)
  return target;
}

int MessageHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_id());
    }

    // optional string from_ip = 2;
    if (has_from_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_ip());
    }

    // optional int32 from_port = 3;
    if (has_from_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_port());
    }

    // optional .MessageHeader.ObjType from_obj_type = 4;
    if (has_from_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_obj_type());
    }

    // optional string to_id = 5;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_id());
    }

    // optional string to_ip = 6;
    if (has_to_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_ip());
    }

    // optional int32 to_port = 7;
    if (has_to_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_port());
    }

    // optional .MessageHeader.ObjType to_obj_type = 8;
    if (has_to_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->to_obj_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MessageHeader.MsgLevel msg_level = 9;
    if (has_msg_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_level());
    }

    // optional .MessageHeader.PkgType pkg_type = 10;
    if (has_pkg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pkg_type());
    }

    // optional .MessageHeader.SysMsgType sys_msg_type = 11;
    if (has_sys_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sys_msg_type());
    }

    // optional int32 priority = 12;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int64 tracker_id = 13;
    if (has_tracker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tracker_id());
    }

    // optional int64 rpl_tracker_id = 14;
    if (has_rpl_tracker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rpl_tracker_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_ip()) {
      set_from_ip(from.from_ip());
    }
    if (from.has_from_port()) {
      set_from_port(from.from_port());
    }
    if (from.has_from_obj_type()) {
      set_from_obj_type(from.from_obj_type());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_ip()) {
      set_to_ip(from.to_ip());
    }
    if (from.has_to_port()) {
      set_to_port(from.to_port());
    }
    if (from.has_to_obj_type()) {
      set_to_obj_type(from.to_obj_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg_level()) {
      set_msg_level(from.msg_level());
    }
    if (from.has_pkg_type()) {
      set_pkg_type(from.pkg_type());
    }
    if (from.has_sys_msg_type()) {
      set_sys_msg_type(from.sys_msg_type());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_tracker_id()) {
      set_tracker_id(from.tracker_id());
    }
    if (from.has_rpl_tracker_id()) {
      set_rpl_tracker_id(from.rpl_tracker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {

  return true;
}

void MessageHeader::Swap(MessageHeader* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(from_ip_, other->from_ip_);
    std::swap(from_port_, other->from_port_);
    std::swap(from_obj_type_, other->from_obj_type_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_ip_, other->to_ip_);
    std::swap(to_port_, other->to_port_);
    std::swap(to_obj_type_, other->to_obj_type_);
    std::swap(msg_level_, other->msg_level_);
    std::swap(pkg_type_, other->pkg_type_);
    std::swap(sys_msg_type_, other->sys_msg_type_);
    std::swap(priority_, other->priority_);
    std::swap(tracker_id_, other->tracker_id_);
    std::swap(rpl_tracker_id_, other->rpl_tracker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageHeader_descriptor_;
  metadata.reflection = MessageHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
