// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_header.proto

#ifndef PROTOBUF_message_5fheader_2eproto__INCLUDED
#define PROTOBUF_message_5fheader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fheader_2eproto();
void protobuf_AssignDesc_message_5fheader_2eproto();
void protobuf_ShutdownFile_message_5fheader_2eproto();

class MessageHeader;

enum MessageHeader_ObjType {
  MessageHeader_ObjType_NODE = 0,
  MessageHeader_ObjType_FILED = 1,
  MessageHeader_ObjType_CACHE = 2,
  MessageHeader_ObjType_ENGINE = 3
};
bool MessageHeader_ObjType_IsValid(int value);
const MessageHeader_ObjType MessageHeader_ObjType_ObjType_MIN = MessageHeader_ObjType_NODE;
const MessageHeader_ObjType MessageHeader_ObjType_ObjType_MAX = MessageHeader_ObjType_ENGINE;
const int MessageHeader_ObjType_ObjType_ARRAYSIZE = MessageHeader_ObjType_ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeader_ObjType_descriptor();
inline const ::std::string& MessageHeader_ObjType_Name(MessageHeader_ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeader_ObjType_descriptor(), value);
}
inline bool MessageHeader_ObjType_Parse(
    const ::std::string& name, MessageHeader_ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeader_ObjType>(
    MessageHeader_ObjType_descriptor(), name, value);
}
enum MessageHeader_MsgLevel {
  MessageHeader_MsgLevel_SYS = 0,
  MessageHeader_MsgLevel_USR = 1
};
bool MessageHeader_MsgLevel_IsValid(int value);
const MessageHeader_MsgLevel MessageHeader_MsgLevel_MsgLevel_MIN = MessageHeader_MsgLevel_SYS;
const MessageHeader_MsgLevel MessageHeader_MsgLevel_MsgLevel_MAX = MessageHeader_MsgLevel_USR;
const int MessageHeader_MsgLevel_MsgLevel_ARRAYSIZE = MessageHeader_MsgLevel_MsgLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeader_MsgLevel_descriptor();
inline const ::std::string& MessageHeader_MsgLevel_Name(MessageHeader_MsgLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeader_MsgLevel_descriptor(), value);
}
inline bool MessageHeader_MsgLevel_Parse(
    const ::std::string& name, MessageHeader_MsgLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeader_MsgLevel>(
    MessageHeader_MsgLevel_descriptor(), name, value);
}
enum MessageHeader_SysMsgType {
  MessageHeader_SysMsgType_PARA_DATA = 0,
  MessageHeader_SysMsgType_REGIST = 1,
  MessageHeader_SysMsgType_NODE_LIST_DATA = 2,
  MessageHeader_SysMsgType_STARTUP_READY = 3
};
bool MessageHeader_SysMsgType_IsValid(int value);
const MessageHeader_SysMsgType MessageHeader_SysMsgType_SysMsgType_MIN = MessageHeader_SysMsgType_PARA_DATA;
const MessageHeader_SysMsgType MessageHeader_SysMsgType_SysMsgType_MAX = MessageHeader_SysMsgType_STARTUP_READY;
const int MessageHeader_SysMsgType_SysMsgType_ARRAYSIZE = MessageHeader_SysMsgType_SysMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeader_SysMsgType_descriptor();
inline const ::std::string& MessageHeader_SysMsgType_Name(MessageHeader_SysMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeader_SysMsgType_descriptor(), value);
}
inline bool MessageHeader_SysMsgType_Parse(
    const ::std::string& name, MessageHeader_SysMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeader_SysMsgType>(
    MessageHeader_SysMsgType_descriptor(), name, value);
}
enum MessageHeader_PkgType {
  MessageHeader_PkgType_REQ = 0,
  MessageHeader_PkgType_RPL = 1,
  MessageHeader_PkgType_PUSH = 2
};
bool MessageHeader_PkgType_IsValid(int value);
const MessageHeader_PkgType MessageHeader_PkgType_PkgType_MIN = MessageHeader_PkgType_REQ;
const MessageHeader_PkgType MessageHeader_PkgType_PkgType_MAX = MessageHeader_PkgType_PUSH;
const int MessageHeader_PkgType_PkgType_ARRAYSIZE = MessageHeader_PkgType_PkgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeader_PkgType_descriptor();
inline const ::std::string& MessageHeader_PkgType_Name(MessageHeader_PkgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeader_PkgType_descriptor(), value);
}
inline bool MessageHeader_PkgType_Parse(
    const ::std::string& name, MessageHeader_PkgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeader_PkgType>(
    MessageHeader_PkgType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader : public ::google::protobuf::Message {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHeader& default_instance();

  void Swap(MessageHeader* other);

  // implements Message ----------------------------------------------

  MessageHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageHeader_ObjType ObjType;
  static const ObjType NODE = MessageHeader_ObjType_NODE;
  static const ObjType FILED = MessageHeader_ObjType_FILED;
  static const ObjType CACHE = MessageHeader_ObjType_CACHE;
  static const ObjType ENGINE = MessageHeader_ObjType_ENGINE;
  static inline bool ObjType_IsValid(int value) {
    return MessageHeader_ObjType_IsValid(value);
  }
  static const ObjType ObjType_MIN =
    MessageHeader_ObjType_ObjType_MIN;
  static const ObjType ObjType_MAX =
    MessageHeader_ObjType_ObjType_MAX;
  static const int ObjType_ARRAYSIZE =
    MessageHeader_ObjType_ObjType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjType_descriptor() {
    return MessageHeader_ObjType_descriptor();
  }
  static inline const ::std::string& ObjType_Name(ObjType value) {
    return MessageHeader_ObjType_Name(value);
  }
  static inline bool ObjType_Parse(const ::std::string& name,
      ObjType* value) {
    return MessageHeader_ObjType_Parse(name, value);
  }

  typedef MessageHeader_MsgLevel MsgLevel;
  static const MsgLevel SYS = MessageHeader_MsgLevel_SYS;
  static const MsgLevel USR = MessageHeader_MsgLevel_USR;
  static inline bool MsgLevel_IsValid(int value) {
    return MessageHeader_MsgLevel_IsValid(value);
  }
  static const MsgLevel MsgLevel_MIN =
    MessageHeader_MsgLevel_MsgLevel_MIN;
  static const MsgLevel MsgLevel_MAX =
    MessageHeader_MsgLevel_MsgLevel_MAX;
  static const int MsgLevel_ARRAYSIZE =
    MessageHeader_MsgLevel_MsgLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgLevel_descriptor() {
    return MessageHeader_MsgLevel_descriptor();
  }
  static inline const ::std::string& MsgLevel_Name(MsgLevel value) {
    return MessageHeader_MsgLevel_Name(value);
  }
  static inline bool MsgLevel_Parse(const ::std::string& name,
      MsgLevel* value) {
    return MessageHeader_MsgLevel_Parse(name, value);
  }

  typedef MessageHeader_SysMsgType SysMsgType;
  static const SysMsgType PARA_DATA = MessageHeader_SysMsgType_PARA_DATA;
  static const SysMsgType REGIST = MessageHeader_SysMsgType_REGIST;
  static const SysMsgType NODE_LIST_DATA = MessageHeader_SysMsgType_NODE_LIST_DATA;
  static const SysMsgType STARTUP_READY = MessageHeader_SysMsgType_STARTUP_READY;
  static inline bool SysMsgType_IsValid(int value) {
    return MessageHeader_SysMsgType_IsValid(value);
  }
  static const SysMsgType SysMsgType_MIN =
    MessageHeader_SysMsgType_SysMsgType_MIN;
  static const SysMsgType SysMsgType_MAX =
    MessageHeader_SysMsgType_SysMsgType_MAX;
  static const int SysMsgType_ARRAYSIZE =
    MessageHeader_SysMsgType_SysMsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SysMsgType_descriptor() {
    return MessageHeader_SysMsgType_descriptor();
  }
  static inline const ::std::string& SysMsgType_Name(SysMsgType value) {
    return MessageHeader_SysMsgType_Name(value);
  }
  static inline bool SysMsgType_Parse(const ::std::string& name,
      SysMsgType* value) {
    return MessageHeader_SysMsgType_Parse(name, value);
  }

  typedef MessageHeader_PkgType PkgType;
  static const PkgType REQ = MessageHeader_PkgType_REQ;
  static const PkgType RPL = MessageHeader_PkgType_RPL;
  static const PkgType PUSH = MessageHeader_PkgType_PUSH;
  static inline bool PkgType_IsValid(int value) {
    return MessageHeader_PkgType_IsValid(value);
  }
  static const PkgType PkgType_MIN =
    MessageHeader_PkgType_PkgType_MIN;
  static const PkgType PkgType_MAX =
    MessageHeader_PkgType_PkgType_MAX;
  static const int PkgType_ARRAYSIZE =
    MessageHeader_PkgType_PkgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PkgType_descriptor() {
    return MessageHeader_PkgType_descriptor();
  }
  static inline const ::std::string& PkgType_Name(PkgType value) {
    return MessageHeader_PkgType_Name(value);
  }
  static inline bool PkgType_Parse(const ::std::string& name,
      PkgType* value) {
    return MessageHeader_PkgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 from_id = 1;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  inline ::google::protobuf::int32 from_id() const;
  inline void set_from_id(::google::protobuf::int32 value);

  // optional string from_ip = 2;
  inline bool has_from_ip() const;
  inline void clear_from_ip();
  static const int kFromIpFieldNumber = 2;
  inline const ::std::string& from_ip() const;
  inline void set_from_ip(const ::std::string& value);
  inline void set_from_ip(const char* value);
  inline void set_from_ip(const char* value, size_t size);
  inline ::std::string* mutable_from_ip();
  inline ::std::string* release_from_ip();
  inline void set_allocated_from_ip(::std::string* from_ip);

  // optional int32 from_port = 3;
  inline bool has_from_port() const;
  inline void clear_from_port();
  static const int kFromPortFieldNumber = 3;
  inline ::google::protobuf::int32 from_port() const;
  inline void set_from_port(::google::protobuf::int32 value);

  // optional .MessageHeader.ObjType from_obj_type = 4;
  inline bool has_from_obj_type() const;
  inline void clear_from_obj_type();
  static const int kFromObjTypeFieldNumber = 4;
  inline ::MessageHeader_ObjType from_obj_type() const;
  inline void set_from_obj_type(::MessageHeader_ObjType value);

  // required int32 to_id = 5;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 5;
  inline ::google::protobuf::int32 to_id() const;
  inline void set_to_id(::google::protobuf::int32 value);

  // required string to_ip = 6;
  inline bool has_to_ip() const;
  inline void clear_to_ip();
  static const int kToIpFieldNumber = 6;
  inline const ::std::string& to_ip() const;
  inline void set_to_ip(const ::std::string& value);
  inline void set_to_ip(const char* value);
  inline void set_to_ip(const char* value, size_t size);
  inline ::std::string* mutable_to_ip();
  inline ::std::string* release_to_ip();
  inline void set_allocated_to_ip(::std::string* to_ip);

  // required int32 to_port = 7;
  inline bool has_to_port() const;
  inline void clear_to_port();
  static const int kToPortFieldNumber = 7;
  inline ::google::protobuf::int32 to_port() const;
  inline void set_to_port(::google::protobuf::int32 value);

  // required .MessageHeader.ObjType to_obj_type = 8;
  inline bool has_to_obj_type() const;
  inline void clear_to_obj_type();
  static const int kToObjTypeFieldNumber = 8;
  inline ::MessageHeader_ObjType to_obj_type() const;
  inline void set_to_obj_type(::MessageHeader_ObjType value);

  // required .MessageHeader.MsgLevel msg_level = 9;
  inline bool has_msg_level() const;
  inline void clear_msg_level();
  static const int kMsgLevelFieldNumber = 9;
  inline ::MessageHeader_MsgLevel msg_level() const;
  inline void set_msg_level(::MessageHeader_MsgLevel value);

  // required .MessageHeader.SysMsgType sys_msg_type = 10;
  inline bool has_sys_msg_type() const;
  inline void clear_sys_msg_type();
  static const int kSysMsgTypeFieldNumber = 10;
  inline ::MessageHeader_SysMsgType sys_msg_type() const;
  inline void set_sys_msg_type(::MessageHeader_SysMsgType value);

  // required .MessageHeader.PkgType pkg_type = 11;
  inline bool has_pkg_type() const;
  inline void clear_pkg_type();
  static const int kPkgTypeFieldNumber = 11;
  inline ::MessageHeader_PkgType pkg_type() const;
  inline void set_pkg_type(::MessageHeader_PkgType value);

  // optional int32 priority = 12;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 12;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional int64 tracker_id = 13;
  inline bool has_tracker_id() const;
  inline void clear_tracker_id();
  static const int kTrackerIdFieldNumber = 13;
  inline ::google::protobuf::int64 tracker_id() const;
  inline void set_tracker_id(::google::protobuf::int64 value);

  // optional int64 rpl_tracker_id = 14;
  inline bool has_rpl_tracker_id() const;
  inline void clear_rpl_tracker_id();
  static const int kRplTrackerIdFieldNumber = 14;
  inline ::google::protobuf::int64 rpl_tracker_id() const;
  inline void set_rpl_tracker_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_ip();
  inline void clear_has_from_ip();
  inline void set_has_from_port();
  inline void clear_has_from_port();
  inline void set_has_from_obj_type();
  inline void clear_has_from_obj_type();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_ip();
  inline void clear_has_to_ip();
  inline void set_has_to_port();
  inline void clear_has_to_port();
  inline void set_has_to_obj_type();
  inline void clear_has_to_obj_type();
  inline void set_has_msg_level();
  inline void clear_has_msg_level();
  inline void set_has_sys_msg_type();
  inline void clear_has_sys_msg_type();
  inline void set_has_pkg_type();
  inline void clear_has_pkg_type();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_tracker_id();
  inline void clear_has_tracker_id();
  inline void set_has_rpl_tracker_id();
  inline void clear_has_rpl_tracker_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* from_ip_;
  ::google::protobuf::int32 from_id_;
  ::google::protobuf::int32 from_port_;
  int from_obj_type_;
  ::google::protobuf::int32 to_id_;
  ::std::string* to_ip_;
  ::google::protobuf::int32 to_port_;
  int to_obj_type_;
  int msg_level_;
  int sys_msg_type_;
  int pkg_type_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int64 tracker_id_;
  ::google::protobuf::int64 rpl_tracker_id_;
  friend void  protobuf_AddDesc_message_5fheader_2eproto();
  friend void protobuf_AssignDesc_message_5fheader_2eproto();
  friend void protobuf_ShutdownFile_message_5fheader_2eproto();

  void InitAsDefaultInstance();
  static MessageHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageHeader

// optional int32 from_id = 1;
inline bool MessageHeader::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageHeader::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageHeader::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageHeader::clear_from_id() {
  from_id_ = 0;
  clear_has_from_id();
}
inline ::google::protobuf::int32 MessageHeader::from_id() const {
  // @@protoc_insertion_point(field_get:MessageHeader.from_id)
  return from_id_;
}
inline void MessageHeader::set_from_id(::google::protobuf::int32 value) {
  set_has_from_id();
  from_id_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.from_id)
}

// optional string from_ip = 2;
inline bool MessageHeader::has_from_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageHeader::set_has_from_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageHeader::clear_has_from_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageHeader::clear_from_ip() {
  if (from_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ip_->clear();
  }
  clear_has_from_ip();
}
inline const ::std::string& MessageHeader::from_ip() const {
  // @@protoc_insertion_point(field_get:MessageHeader.from_ip)
  return *from_ip_;
}
inline void MessageHeader::set_from_ip(const ::std::string& value) {
  set_has_from_ip();
  if (from_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ip_ = new ::std::string;
  }
  from_ip_->assign(value);
  // @@protoc_insertion_point(field_set:MessageHeader.from_ip)
}
inline void MessageHeader::set_from_ip(const char* value) {
  set_has_from_ip();
  if (from_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ip_ = new ::std::string;
  }
  from_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageHeader.from_ip)
}
inline void MessageHeader::set_from_ip(const char* value, size_t size) {
  set_has_from_ip();
  if (from_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ip_ = new ::std::string;
  }
  from_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageHeader.from_ip)
}
inline ::std::string* MessageHeader::mutable_from_ip() {
  set_has_from_ip();
  if (from_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageHeader.from_ip)
  return from_ip_;
}
inline ::std::string* MessageHeader::release_from_ip() {
  clear_has_from_ip();
  if (from_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_ip_;
    from_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageHeader::set_allocated_from_ip(::std::string* from_ip) {
  if (from_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_ip_;
  }
  if (from_ip) {
    set_has_from_ip();
    from_ip_ = from_ip;
  } else {
    clear_has_from_ip();
    from_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageHeader.from_ip)
}

// optional int32 from_port = 3;
inline bool MessageHeader::has_from_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageHeader::set_has_from_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageHeader::clear_has_from_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageHeader::clear_from_port() {
  from_port_ = 0;
  clear_has_from_port();
}
inline ::google::protobuf::int32 MessageHeader::from_port() const {
  // @@protoc_insertion_point(field_get:MessageHeader.from_port)
  return from_port_;
}
inline void MessageHeader::set_from_port(::google::protobuf::int32 value) {
  set_has_from_port();
  from_port_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.from_port)
}

// optional .MessageHeader.ObjType from_obj_type = 4;
inline bool MessageHeader::has_from_obj_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageHeader::set_has_from_obj_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageHeader::clear_has_from_obj_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageHeader::clear_from_obj_type() {
  from_obj_type_ = 0;
  clear_has_from_obj_type();
}
inline ::MessageHeader_ObjType MessageHeader::from_obj_type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.from_obj_type)
  return static_cast< ::MessageHeader_ObjType >(from_obj_type_);
}
inline void MessageHeader::set_from_obj_type(::MessageHeader_ObjType value) {
  assert(::MessageHeader_ObjType_IsValid(value));
  set_has_from_obj_type();
  from_obj_type_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.from_obj_type)
}

// required int32 to_id = 5;
inline bool MessageHeader::has_to_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageHeader::set_has_to_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageHeader::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageHeader::clear_to_id() {
  to_id_ = 0;
  clear_has_to_id();
}
inline ::google::protobuf::int32 MessageHeader::to_id() const {
  // @@protoc_insertion_point(field_get:MessageHeader.to_id)
  return to_id_;
}
inline void MessageHeader::set_to_id(::google::protobuf::int32 value) {
  set_has_to_id();
  to_id_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.to_id)
}

// required string to_ip = 6;
inline bool MessageHeader::has_to_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageHeader::set_has_to_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageHeader::clear_has_to_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageHeader::clear_to_ip() {
  if (to_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ip_->clear();
  }
  clear_has_to_ip();
}
inline const ::std::string& MessageHeader::to_ip() const {
  // @@protoc_insertion_point(field_get:MessageHeader.to_ip)
  return *to_ip_;
}
inline void MessageHeader::set_to_ip(const ::std::string& value) {
  set_has_to_ip();
  if (to_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ip_ = new ::std::string;
  }
  to_ip_->assign(value);
  // @@protoc_insertion_point(field_set:MessageHeader.to_ip)
}
inline void MessageHeader::set_to_ip(const char* value) {
  set_has_to_ip();
  if (to_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ip_ = new ::std::string;
  }
  to_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageHeader.to_ip)
}
inline void MessageHeader::set_to_ip(const char* value, size_t size) {
  set_has_to_ip();
  if (to_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ip_ = new ::std::string;
  }
  to_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageHeader.to_ip)
}
inline ::std::string* MessageHeader::mutable_to_ip() {
  set_has_to_ip();
  if (to_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageHeader.to_ip)
  return to_ip_;
}
inline ::std::string* MessageHeader::release_to_ip() {
  clear_has_to_ip();
  if (to_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_ip_;
    to_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageHeader::set_allocated_to_ip(::std::string* to_ip) {
  if (to_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_ip_;
  }
  if (to_ip) {
    set_has_to_ip();
    to_ip_ = to_ip;
  } else {
    clear_has_to_ip();
    to_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageHeader.to_ip)
}

// required int32 to_port = 7;
inline bool MessageHeader::has_to_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageHeader::set_has_to_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageHeader::clear_has_to_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageHeader::clear_to_port() {
  to_port_ = 0;
  clear_has_to_port();
}
inline ::google::protobuf::int32 MessageHeader::to_port() const {
  // @@protoc_insertion_point(field_get:MessageHeader.to_port)
  return to_port_;
}
inline void MessageHeader::set_to_port(::google::protobuf::int32 value) {
  set_has_to_port();
  to_port_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.to_port)
}

// required .MessageHeader.ObjType to_obj_type = 8;
inline bool MessageHeader::has_to_obj_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageHeader::set_has_to_obj_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageHeader::clear_has_to_obj_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageHeader::clear_to_obj_type() {
  to_obj_type_ = 0;
  clear_has_to_obj_type();
}
inline ::MessageHeader_ObjType MessageHeader::to_obj_type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.to_obj_type)
  return static_cast< ::MessageHeader_ObjType >(to_obj_type_);
}
inline void MessageHeader::set_to_obj_type(::MessageHeader_ObjType value) {
  assert(::MessageHeader_ObjType_IsValid(value));
  set_has_to_obj_type();
  to_obj_type_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.to_obj_type)
}

// required .MessageHeader.MsgLevel msg_level = 9;
inline bool MessageHeader::has_msg_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageHeader::set_has_msg_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageHeader::clear_has_msg_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageHeader::clear_msg_level() {
  msg_level_ = 0;
  clear_has_msg_level();
}
inline ::MessageHeader_MsgLevel MessageHeader::msg_level() const {
  // @@protoc_insertion_point(field_get:MessageHeader.msg_level)
  return static_cast< ::MessageHeader_MsgLevel >(msg_level_);
}
inline void MessageHeader::set_msg_level(::MessageHeader_MsgLevel value) {
  assert(::MessageHeader_MsgLevel_IsValid(value));
  set_has_msg_level();
  msg_level_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.msg_level)
}

// required .MessageHeader.SysMsgType sys_msg_type = 10;
inline bool MessageHeader::has_sys_msg_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MessageHeader::set_has_sys_msg_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MessageHeader::clear_has_sys_msg_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MessageHeader::clear_sys_msg_type() {
  sys_msg_type_ = 0;
  clear_has_sys_msg_type();
}
inline ::MessageHeader_SysMsgType MessageHeader::sys_msg_type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.sys_msg_type)
  return static_cast< ::MessageHeader_SysMsgType >(sys_msg_type_);
}
inline void MessageHeader::set_sys_msg_type(::MessageHeader_SysMsgType value) {
  assert(::MessageHeader_SysMsgType_IsValid(value));
  set_has_sys_msg_type();
  sys_msg_type_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.sys_msg_type)
}

// required .MessageHeader.PkgType pkg_type = 11;
inline bool MessageHeader::has_pkg_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MessageHeader::set_has_pkg_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MessageHeader::clear_has_pkg_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MessageHeader::clear_pkg_type() {
  pkg_type_ = 0;
  clear_has_pkg_type();
}
inline ::MessageHeader_PkgType MessageHeader::pkg_type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.pkg_type)
  return static_cast< ::MessageHeader_PkgType >(pkg_type_);
}
inline void MessageHeader::set_pkg_type(::MessageHeader_PkgType value) {
  assert(::MessageHeader_PkgType_IsValid(value));
  set_has_pkg_type();
  pkg_type_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.pkg_type)
}

// optional int32 priority = 12;
inline bool MessageHeader::has_priority() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MessageHeader::set_has_priority() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MessageHeader::clear_has_priority() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MessageHeader::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 MessageHeader::priority() const {
  // @@protoc_insertion_point(field_get:MessageHeader.priority)
  return priority_;
}
inline void MessageHeader::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.priority)
}

// optional int64 tracker_id = 13;
inline bool MessageHeader::has_tracker_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MessageHeader::set_has_tracker_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MessageHeader::clear_has_tracker_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MessageHeader::clear_tracker_id() {
  tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_tracker_id();
}
inline ::google::protobuf::int64 MessageHeader::tracker_id() const {
  // @@protoc_insertion_point(field_get:MessageHeader.tracker_id)
  return tracker_id_;
}
inline void MessageHeader::set_tracker_id(::google::protobuf::int64 value) {
  set_has_tracker_id();
  tracker_id_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.tracker_id)
}

// optional int64 rpl_tracker_id = 14;
inline bool MessageHeader::has_rpl_tracker_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MessageHeader::set_has_rpl_tracker_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MessageHeader::clear_has_rpl_tracker_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MessageHeader::clear_rpl_tracker_id() {
  rpl_tracker_id_ = GOOGLE_LONGLONG(0);
  clear_has_rpl_tracker_id();
}
inline ::google::protobuf::int64 MessageHeader::rpl_tracker_id() const {
  // @@protoc_insertion_point(field_get:MessageHeader.rpl_tracker_id)
  return rpl_tracker_id_;
}
inline void MessageHeader::set_rpl_tracker_id(::google::protobuf::int64 value) {
  set_has_rpl_tracker_id();
  rpl_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:MessageHeader.rpl_tracker_id)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MessageHeader_ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_ObjType>() {
  return ::MessageHeader_ObjType_descriptor();
}
template <> struct is_proto_enum< ::MessageHeader_MsgLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_MsgLevel>() {
  return ::MessageHeader_MsgLevel_descriptor();
}
template <> struct is_proto_enum< ::MessageHeader_SysMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_SysMsgType>() {
  return ::MessageHeader_SysMsgType_descriptor();
}
template <> struct is_proto_enum< ::MessageHeader_PkgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_PkgType>() {
  return ::MessageHeader_PkgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fheader_2eproto__INCLUDED
